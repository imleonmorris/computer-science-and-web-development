Scope is the set of rules which determine where vars are stored and how to access them.

1. Compiler Theory
    -> JS falls under the category of 'dynamic' or 'interpreted' language but code IS in fact compiled RIGHT BEFORE it is executed.
    -> During compilation, source code must be tokenized (broken up), parsed (turned into an Abstract Syntax Tree) and turned into executable code.
2. Understanding Scope
    -> Useful to see scope as a conversation between three people: Engine (s-t-f compilation/execution), Compiler (parses/gens code) and Scope (collects/maintains list of vars, enforces rules).
    -> LHS is the target of an assignment: a = 2;
    -> RHS the source of an assignment: console.log( a );

3. Nested Scope
    -> Engine starts at currently executing Scope, looks for vars there, then moves up a level all the way to global Scope.
    -> Think tall building metaphor.
4. Errors
    -> If RHS isn't found: ReferenceError
    -> If LHS isn't found: create new var (if not in strict mode)
    -> TypeError occurs when Scope successful but action attempted is illegal or impossible.

