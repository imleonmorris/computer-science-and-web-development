1. Values & Types
2. Objects
    a. Arrays
    b. Functions
3. Built-In Type Methods
4. Comparing Values
    a. Coercion
    b. Truthy & Falsy
    c. Equality
    d. Inequality
5. Variables
6. Function Scopes
    a. Hoisting
    b. Nested scopes
7. Conditionals
8. Strict Mode
9. Functions as Values
10. Immediately Invoked Function Expressions (IIFEs)
11. Closure
    a. Modules
12. this Identifier
13. Prototypes
14. Old & New
15. Polyfilling
16. Transpiling
17. Non-JavaScript

// Values and Types

    1. string
    2. number
    3. boolean
    4. null and undefined
    5. object
    6. symbol (new)

    -> use the typeof operator to examine a value's type. Always returns a string value.

    var a;
    typeof a;       // "undefined"

    a = "hello world";
    typeof a;       // "string"

    a = 42;
    typeof a;       // "number"

    a = true;
    typeof a;       // "boolean"

    a = null;
    typeof a;       // "object"--weird, bug

    a = undefined;
    typeof a;       // "undefined"

    a = { b: "c"};
    typeof a;       // "object"

// Objects

    var obj = {
        a: "hello world",
        b: 42,
        c: true
    };

    obj.a;  // "hello world"
    obj.b;  // 42
    obj.c;  // true

    obj["a"];   // "hello world"
    obj["b"];   // 42
    obj["c"];   // true

    -> these properties can be accessed using:
        1. dot notation
        2. bracket notation (such properties known as keys)

    // a. Arrays

    -> holds values in numerically indexed positions.

    var arr = [
        "hello world",
        42,
        true
    ];

    arr[0];     // "hello world"
    arr[1];     // 42
    arr[2];     // true
    arr.length; // 3

    tyeof arr;  // "object"

    // b. Functions

    function foo() {
        return 42;
    }

    foo.bar = "hello world";

    typeof foo;         // "function"
    typeof foo();       // "number"
    typeof foo.bar;     // "string"

